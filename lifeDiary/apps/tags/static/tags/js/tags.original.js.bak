// Tags Management JavaScript
// 태그 관리 페이지의 모든 상호작용 기능을 담당합니다.

// 전역 변수 및 설정
const API_BASE_URL = '/tags/api/tags/';
const isUserSuperuser = window.userPermissions?.isSuperuser || false;

// 유틸리티 함수들
/**
 * CSRF 토큰 가져오기
 * @param {string} name - 쿠키 이름
 * @returns {string|null} CSRF 토큰
 */
function getCookie(name) {
    let cookieValue = null;
    if (document.cookie && document.cookie !== '') {
        const cookies = document.cookie.split(';');
        for (let i = 0; i < cookies.length; i++) {
            const cookie = cookies[i].trim();
            if (cookie.substring(0, name.length + 1) === (name + '=')) {
                cookieValue = decodeURIComponent(cookie.substring(name.length + 1));
                break;
            }
        }
    }
    return cookieValue;
}

/**
 * RESTful API 호출을 위한 공통 함수
 * @param {string} url - API URL
 * @param {string} method - HTTP 메소드 (GET, POST, PUT, DELETE)
 * @param {Object} data - 전송할 데이터
 * @returns {Promise} API 응답
 */
async function apiCall(url, method = 'GET', data = null) {
    const options = {
        method: method,
        headers: {
            'X-CSRFToken': getCookie('csrftoken')
        }
    };
    
    if (data && (method === 'POST' || method === 'PUT')) {
        options.headers['Content-Type'] = 'application/json';
        options.body = JSON.stringify(data);
    }
    
    try {
        const response = await fetch(url, options);
        
        if (!response.ok) {
            // HTTP 상태별 에러 처리
            switch (response.status) {
                case 403:
                    throw new Error('접근 권한이 없습니다.');
                case 404:
                    throw new Error('요청한 태그를 찾을 수 없습니다.');
                case 500:
                    throw new Error('서버 내부 오류가 발생했습니다.');
                default:
                    throw new Error(`HTTP error! status: ${response.status}`);
            }
        }
        
        const result = await response.json();
        
        // 서버에서 success: false로 응답한 경우 에러 처리
        if (result.hasOwnProperty('success') && result.success === false) {
            throw new Error(result.message || '알 수 없는 오류가 발생했습니다.');
        }
        
        return result;
    } catch (error) {
        console.error('API 호출 오류:', error);
        throw error;
    }
}

/**
 * 로딩 스피너 표시
 * @param {HTMLElement} element - 스피너를 표시할 요소
 * @param {boolean} show - 표시 여부
 */
function showLoadingSpinner(element, show = true) {
    if (show) {
        element.innerHTML = '<div class="text-center"><div class="loading-spinner"></div></div>';
    }
}

/**
 * 성공 알림 표시
 * @param {string} message - 알림 메시지
 */
function showSuccessMessage(message) {
    // TODO: 향후 토스트 메시지로 개선 예정
    console.log('✅ 성공:', message);
    alert(message);
}

/**
 * 에러 알림 표시
 * @param {string} message - 에러 메시지
 */
function showErrorMessage(message) {
    console.error('❌ 오류:', message);
    alert(`오류: ${message}`);
}

// 태그 관리 클래스
class TagManager {
    constructor() {
        this.tagModal = null;
        this.currentTagId = null;
        this.init();
    }
    
    /**
     * 초기화
     */
    init() {
        this.setupEventListeners();
        this.loadTags();
    }
    
    /**
     * 이벤트 리스너 설정
     */
    setupEventListeners() {
        // Bootstrap 모달 초기화
        const modalElement = document.getElementById('tagModal');
        if (modalElement) {
            this.tagModal = new bootstrap.Modal(modalElement);
        }
        
        // 새 태그 생성 버튼
        const createTagBtn = document.getElementById('createTagBtn');
        if (createTagBtn) {
            createTagBtn.addEventListener('click', () => this.openCreateModal());
        }
        
        // 태그 저장 버튼
        const saveTagBtn = document.getElementById('saveTagBtn');
        if (saveTagBtn) {
            saveTagBtn.addEventListener('click', () => this.saveTag());
        }
        
        // 폼 제출 방지
        const tagForm = document.getElementById('tagForm');
        if (tagForm) {
            tagForm.addEventListener('submit', (e) => {
                e.preventDefault();
                this.saveTag();
            });
        }
    }
    
    /**
     * 태그 목록 로드 (RESTful API 사용)
     */
    async loadTags() {
        const tagList = document.getElementById('tagList');
        const emptyState = document.getElementById('emptyState');
        
        try {
            showLoadingSpinner(tagList);
            
            // RESTful GET /api/tags/ 사용
            const result = await apiCall(API_BASE_URL, 'GET');
            
            if (result.success) {
                this.displayTags(result.tags);
            } else {
                throw new Error(result.message);
            }
        } catch (error) {
            console.error('태그 로드 실패:', error);
            tagList.innerHTML = `
                <div class="col-12">
                    <div class="alert alert-danger">
                        <i class="fas fa-exclamation-triangle me-2"></i>
                        태그를 불러오는 중 오류가 발생했습니다: ${error.message}
                    </div>
                </div>
            `;
        }
    }
    
    /**
     * 태그 목록 표시
     * @param {Array} tags - 태그 배열
     */
    displayTags(tags) {
        const tagList = document.getElementById('tagList');
        const emptyState = document.getElementById('emptyState');
        
        // 태그 분류
        const userTags = tags.filter(tag => !tag.is_default);
        const defaultTags = tags.filter(tag => tag.is_default);
        
        // 빈 상태 처리
        if (userTags.length === 0 && (!isUserSuperuser || defaultTags.length === 0)) {
            tagList.innerHTML = '';
            emptyState.style.display = 'block';
            return;
        }
        
        emptyState.style.display = 'none';
        
        let html = '';
        
        // 기본 태그 섹션 (관리자에게만 표시)
        if (isUserSuperuser && defaultTags.length > 0) {
            html += this.renderTagSection('기본 태그 (관리자 전용)', 'star', defaultTags, true);
        }
        
        // 사용자 태그 섹션
        if (userTags.length > 0) {
            const hasDefaultSection = isUserSuperuser && defaultTags.length > 0;
            html += this.renderTagSection('개인 태그', 'user', userTags, false, hasDefaultSection);
        }
        
        tagList.innerHTML = html;
    }
    
    /**
     * 태그 섹션 렌더링
     * @param {string} title - 섹션 제목
     * @param {string} icon - 아이콘 클래스
     * @param {Array} tags - 태그 배열
     * @param {boolean} isDefault - 기본 태그 여부
     * @param {boolean} addMarginTop - 상단 마진 추가 여부
     * @returns {string} HTML 문자열
     */
    renderTagSection(title, icon, tags, isDefault = false, addMarginTop = false) {
        let html = `
            <div class="col-12 mb-3 ${addMarginTop ? 'mt-4' : ''}">
                <h6 class="text-muted">
                    <i class="fas fa-${icon} me-1"></i>
                    ${title}
                </h6>
            </div>
        `;
        
        tags.forEach(tag => {
            html += this.renderTagCard(tag, isDefault);
        });
        
        return html;
    }
    
    /**
     * 태그 카드 렌더링
     * @param {Object} tag - 태그 객체
     * @param {boolean} isDefault - 기본 태그 여부
     * @returns {string} HTML 문자열
     */
    renderTagCard(tag, isDefault = false) {
        const cardClass = isDefault ? 'tag-card default-tag' : 'tag-card';
        const badgeClass = isDefault ? 'badge bg-warning text-dark' : '';
        
        return `
            <div class="col-md-6 col-lg-4 mb-3">
                <div class="card h-100 ${cardClass}">
                    <div class="card-body">
                        <div class="d-flex align-items-center mb-2">
                            <span class="tag-badge me-2" style="background-color: ${tag.color}; color: white;">
                                ${this.escapeHtml(tag.name)}
                            </span>
                            ${isDefault ? `<small class="${badgeClass}">기본</small>` : ''}
                        </div>
                        <small class="text-muted">${tag.color}</small>
                    </div>
                    <div class="card-footer bg-transparent">
                        <div class="d-flex gap-2">
                            ${tag.can_edit ? `
                                <button class="btn btn-outline-primary btn-sm flex-fill" 
                                        onclick="tagManager.openEditModal(${tag.id}, '${this.escapeHtml(tag.name)}', '${tag.color}', ${tag.is_default})">
                                    <i class="fas fa-edit me-1"></i>수정
                                </button>
                            ` : ''}
                            ${tag.can_delete ? `
                                <button class="btn btn-outline-danger btn-sm flex-fill" 
                                        onclick="tagManager.deleteTag(${tag.id}, '${this.escapeHtml(tag.name)}')">
                                    <i class="fas fa-trash me-1"></i>삭제
                                </button>
                            ` : ''}
                        </div>
                    </div>
                </div>
            </div>
        `;
    }
    
    /**
     * HTML 이스케이프
     * @param {string} text - 이스케이프할 텍스트
     * @returns {string} 이스케이프된 텍스트
     */
    escapeHtml(text) {
        const div = document.createElement('div');
        div.textContent = text;
        return div.innerHTML.replace(/'/g, '&#39;');
    }
    
    /**
     * 새 태그 생성 모달 열기
     */
    openCreateModal() {
        this.currentTagId = null;
        this.resetModal();
        document.getElementById('tagModalTitle').textContent = '새 태그 생성';
        
        // 관리자에게만 기본 태그 옵션 표시
        this.toggleDefaultTagOption();
        
        if (this.tagModal) {
            this.tagModal.show();
        }
    }
    
    /**
     * 태그 수정 모달 열기
     * @param {number} id - 태그 ID
     * @param {string} name - 태그명
     * @param {string} color - 태그 색상
     * @param {boolean} isDefault - 기본 태그 여부
     */
    openEditModal(id, name, color, isDefault) {
        this.currentTagId = id;
        document.getElementById('tagModalTitle').textContent = '태그 수정';
        document.getElementById('tagName').value = name;
        document.getElementById('tagColor').value = color;
        
        // 관리자에게만 기본 태그 옵션 표시
        this.toggleDefaultTagOption();
        if (isUserSuperuser) {
            document.getElementById('isDefault').checked = isDefault;
        }
        
        if (this.tagModal) {
            this.tagModal.show();
        }
    }
    
    /**
     * 모달 초기화
     */
    resetModal() {
        const form = document.getElementById('tagForm');
        if (form) {
            form.reset();
        }
        document.getElementById('tagColor').value = '#007bff';
        
        if (isUserSuperuser) {
            document.getElementById('isDefault').checked = false;
        }
    }
    
    /**
     * 기본 태그 옵션 토글
     */
    toggleDefaultTagOption() {
        const defaultTagOption = document.getElementById('defaultTagOption');
        if (defaultTagOption) {
            defaultTagOption.style.display = isUserSuperuser ? 'block' : 'none';
        }
    }
    
    /**
     * 태그 저장 (RESTful API 사용)
     */
    async saveTag() {
        const nameInput = document.getElementById('tagName');
        const colorInput = document.getElementById('tagColor');
        const isDefaultInput = document.getElementById('isDefault');
        
        const name = nameInput.value.trim();
        const color = colorInput.value;
        const isDefault = isUserSuperuser ? isDefaultInput.checked : false;
        
        // 클라이언트 측 입력 검증
        if (!name) {
            showErrorMessage('태그명을 입력해주세요.');
            nameInput.focus();
            return;
        }
        
        if (name.length > 50) {
            showErrorMessage('태그명은 50자 이하로 입력해주세요.');
            nameInput.focus();
            return;
        }
        
        const saveBtn = document.getElementById('saveTagBtn');
        const originalText = saveBtn.textContent;
        
        try {
            // 버튼 비활성화 및 로딩 표시
            saveBtn.disabled = true;
            saveBtn.innerHTML = '<div class="loading-spinner me-2"></div>저장 중...';
            
            const data = { name, color, is_default: isDefault };
            let result;
            
            if (this.currentTagId) {
                // RESTful PUT /api/tags/{id}/ 사용
                result = await apiCall(`${API_BASE_URL}${this.currentTagId}/`, 'PUT', data);
            } else {
                // RESTful POST /api/tags/ 사용
                result = await apiCall(API_BASE_URL, 'POST', data);
            }
            
            if (result.success) {
                if (this.tagModal) {
                    this.tagModal.hide();
                }
                await this.loadTags();
                showSuccessMessage(result.message);
            } else {
                throw new Error(result.message);
            }
        } catch (error) {
            console.error('태그 저장 오류:', error);
            showErrorMessage(error.message || '태그 저장 중 오류가 발생했습니다.');
        } finally {
            // 버튼 복원
            saveBtn.disabled = false;
            saveBtn.textContent = originalText;
        }
    }
    
    /**
     * 태그 삭제 (RESTful API 사용)
     * @param {number} id - 태그 ID
     * @param {string} name - 태그명
     */
    async deleteTag(id, name) {
        if (!confirm(`"${name}" 태그를 삭제하시겠습니까?\n\n※ 사용 중인 태그는 삭제할 수 없습니다.`)) {
            return;
        }
        
        try {
            // RESTful DELETE /api/tags/{id}/ 사용
            const result = await apiCall(`${API_BASE_URL}${id}/`, 'DELETE');
            
            if (result.success) {
                await this.loadTags();
                showSuccessMessage(result.message);
            } else {
                throw new Error(result.message);
            }
        } catch (error) {
            console.error('태그 삭제 오류:', error);
            showErrorMessage(error.message || '태그 삭제 중 오류가 발생했습니다.');
        }
    }
}

// 전역 변수로 TagManager 인스턴스 생성
let tagManager = null;

// DOM 로드 완료 시 초기화
document.addEventListener('DOMContentLoaded', function() {
    console.log('Tags 페이지 초기화 시작');
    
    // Bootstrap 로드 확인
    if (typeof bootstrap === 'undefined') {
        console.error('Bootstrap이 로드되지 않았습니다.');
        return;
    }
    
    // TagManager 초기화
    tagManager = new TagManager();
});

// 전역 함수들 (이전 버전과의 호환성을 위해 유지)
window.editTag = function(id, name, color, isDefault) {
    if (tagManager) {
        tagManager.openEditModal(id, name, color, isDefault);
    }
};

window.deleteTag = function(id, name) {
    if (tagManager) {
        tagManager.deleteTag(id, name);
    }
}; 